{"version":3,"sources":["redux/actions/apiActions.js","redux/actions/stocksActions.js","components/StocksCalender/StocksCalender.js","components/Chart/Chart.js","components/Profit/Profit.js","components/Loader/Loader.js","components/Home/Home.js","redux/reducers/stocksReducer.js","redux/reducers/reducer.js","App.js","redux/store.js","serviceWorker.js","index.js"],"names":["modifyStockPriceUrl","headers","Authorization","getStocksData","dispatch","Axios","get","then","response","catch","error","updateStocksCalender","data","records","stocksData","type","addStockPrice","stock","payload","post","apiAddStockPrice","updateStocksData","showToastMessage","deleteStockPrice","stockId","delete","apiDeleteStockPrice","deleteStockData","message","monthCellRender","value","num","month","getMonthData","className","connect","store","stocks","stockInfo","setMonthAndYear","year","newStockData","props","useState","modalVisible","setModalVisibility","newStockPrice","setNewStockPrice","selectedDate","setSelectedDate","map","stockDate","Date","date","day","getDate","getMonth","getFullYear","Object","assign","toggleModalVisibility","bordered","dateCellRender","stockRecord","filter","getStockRecord","index","key","theme","onClick","id","color","price","length","onPanelChange","title","visible","onOk","fields","onCancel","formatter","size","defaultValue","onChange","stockPrice","onPressEnter","alert","monthNames","xAxisDates","yAxisPrices","Number","options","text","xAxis","categories","series","showInLegend","highcharts","Highcharts","maximumProfit","getMaximumProfit","useEffect","Loader","tip","initialState","stockRecords","buyDate","sellDate","stocksReducer","state","action","newStock","updatedStocksList","sort","stockA","stockB","stockADate","stockBDate","stocksInState","updatedStocks","x","stockList","dailyProfitList","indexA","stockDetails","priceDiffList","indexB","priceDiff","maxDiff","Math","max","indexOf","rootReducer","combineReducers","App","createStore","applyMiddleware","thunk","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console"],"mappings":"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","file":"static/js/main.2455c1a4.chunk.js","sourcesContent":["import Axios from \"axios\";\r\n\r\nconst stocksUrl =\r\n  \"https://api.airtable.com/v0/appfSnQLDjmZaKBkW/tblaBiC6LtFpJ6nRw?sort%5B0%5D%5Bfield%5D=date&sort%5B0%5D%5Bdirection%5D=asc\";\r\n\r\nconst modifyStockPriceUrl =\r\n  \"https://api.airtable.com/v0/appfSnQLDjmZaKBkW/Stock%20Prices\";\r\n\r\nconst apiKey = \"keyqdUGZqw83GnkG7\";\r\nconst headers = {\r\n  Authorization: \"Bearer \" + apiKey,\r\n  \"Content-Type\": \"application/json\"\r\n};\r\n\r\nexport const apiFetchStocksData = () => {\r\n  return Axios.get(stocksUrl, { headers: headers })\r\n    .then(response => {\r\n      return response;\r\n    })\r\n    .catch(error => {\r\n      return { error: error };\r\n    });\r\n};\r\n\r\nexport const apiAddStockPrice = data => {\r\n  let payload = data;\r\n  return Axios.post(modifyStockPriceUrl, payload, { headers: headers });\r\n};\r\n\r\nexport const apiDeleteStockPrice = stockId => {\r\n  return Axios.delete(modifyStockPriceUrl + \"/\" + stockId, {\r\n    headers: headers\r\n  });\r\n};\r\n","import { apiFetchStocksData } from \"./apiActions\";\r\nimport { apiAddStockPrice } from \"./apiActions\";\r\nimport { apiDeleteStockPrice } from \"./apiActions\";\r\n\r\nexport const getStocksData = () => {\r\n  return dispatch => {\r\n    apiFetchStocksData().then(response => {\r\n      if (response.error) {\r\n      } else {\r\n        dispatch(updateStocksCalender(response.data.records));\r\n      }\r\n    });\r\n  };\r\n};\r\n\r\nexport const updateStocksCalender = stocksData => {\r\n  return { type: \"UPDATE_STOCKS_CALENDER\", stocksData: stocksData };\r\n};\r\n\r\nexport const setMonthAndYear = (month, year) => {\r\n  return { type: \"SET_MONTH_YEAR\", month: month, year: year };\r\n};\r\n\r\nexport const addStockPrice = stock => {\r\n  return dispatch => {\r\n    apiAddStockPrice(stock).then(response => {\r\n      if (!response.data) {\r\n      } else {\r\n        let stock = response.data.records[0];\r\n        dispatch(updateStocksData(stock));\r\n        dispatch(showToastMessage(\"Stock Price has been updated.\"));\r\n      }\r\n    });\r\n  };\r\n};\r\n\r\nexport const deleteStockPrice = stockId => {\r\n  return dispatch => {\r\n    apiDeleteStockPrice(stockId).then(response => {\r\n      if (!response.data) {\r\n      } else {\r\n        dispatch(deleteStockData(stockId));\r\n        dispatch(showToastMessage(\"Stock Price has been removed!\"));\r\n      }\r\n    });\r\n  };\r\n};\r\n\r\nexport const deleteStockData = stockId => {\r\n  return { type: \"DELETE_STOCK_DATA\", stockId: stockId };\r\n};\r\n\r\nexport const updateStocksData = stock => {\r\n  return { type: \"UPDATE_STOCK_DATA\", stock: stock };\r\n};\r\n\r\nexport const getMaximumProfit = () => {\r\n  return { type: \"GET_MAXIMUM_PROFIT\" };\r\n};\r\n\r\nexport const showToastMessage = message => {\r\n  return { type: \"SHOW_TOAST_MESSAGE\", message: message };\r\n};\r\n","import React, { useState } from \"react\";\r\nimport { Calendar, Button, Icon, Tag, Modal, InputNumber, Card } from \"antd\";\r\nimport { connect } from \"react-redux\";\r\nimport { getStocksData } from \"../../redux/actions/stocksActions\";\r\nimport { addStockPrice } from \"../../redux/actions/stocksActions\";\r\nimport { deleteStockPrice } from \"../../redux/actions/stocksActions\";\r\nimport { setMonthAndYear } from \"../../redux/actions/stocksActions\";\r\n\r\nimport \"antd/dist/antd.css\";\r\nimport \"./stocks-calender.css\";\r\n\r\nconst getMonthData = value => {\r\n  if (value.month() === 8) {\r\n    return 1394;\r\n  }\r\n};\r\n\r\nfunction monthCellRender(value) {\r\n  const num = getMonthData(value);\r\n  return num ? (\r\n    <div className=\"notes-month\">\r\n      <section>{num}</section>\r\n      <span>Backlog number</span>\r\n    </div>\r\n  ) : null;\r\n}\r\n\r\nconst StocksCalender = props => {\r\n  const [modalVisible, setModalVisibility] = useState(false);\r\n  const [newStockPrice, setNewStockPrice] = useState(0);\r\n  const [selectedDate, setSelectedDate] = useState();\r\n\r\n  const stocks = props.stocks;\r\n  const stocksData = stocks.map(stock => {\r\n    let stockDate = new Date(stock.date);\r\n    let day = stockDate.getDate();\r\n    let month = stockDate.getMonth();\r\n    let year = stockDate.getFullYear();\r\n    return Object.assign({}, { year: year, month: month, day: day, ...stock });\r\n  });\r\n\r\n  const getStockRecord = value => {\r\n    return stocksData.filter(\r\n      stock =>\r\n        stock.day === value.date() &&\r\n        stock.month === value.month() &&\r\n        stock.year === value.year()\r\n    );\r\n  };\r\n\r\n  const toggleModalVisibility = date => {\r\n    setModalVisibility(!modalVisible);\r\n    setSelectedDate(date);\r\n  };\r\n\r\n  const setNewStocksPrice = stockPrice => {\r\n    setNewStockPrice(stockPrice);\r\n  };\r\n\r\n  const addStockPrice = () => {\r\n    let date =\r\n      selectedDate.year() +\r\n      \"-\" +\r\n      (selectedDate.month() + 1) +\r\n      \"-\" +\r\n      selectedDate.date();\r\n\r\n    let newStockData = {\r\n      records: [\r\n        {\r\n          fields: {\r\n            date,\r\n            price: newStockPrice\r\n          }\r\n        }\r\n      ]\r\n    };\r\n    props.addStockPrice(newStockData);\r\n    setNewStockPrice(0);\r\n    toggleModalVisibility();\r\n  };\r\n\r\n  const deleteStockPrice = stock => {\r\n    let stockId = stock.id;\r\n    props.deleteStockPrice(stockId);\r\n  };\r\n\r\n  const setMonthAndYear = value => {\r\n    let date = new Date(value);\r\n    let month = date.getMonth();\r\n    let year = date.getFullYear();\r\n    props.setMonthAndYear(month, year);\r\n  };\r\n\r\n  const dateCellRender = value => {\r\n    const stockRecord = getStockRecord(value);\r\n    return (\r\n      <ul className=\"stock-price-container\">\r\n        {stockRecord &&\r\n          stockRecord.map((stock, index) => (\r\n            <ul key={index} className=\"stock-price-item\">\r\n              <li className=\"stock-remove-button\">\r\n                <Icon\r\n                  type=\"close-circle\"\r\n                  theme=\"filled\"\r\n                  className=\"stock-remove-icon\"\r\n                  onClick={() => deleteStockPrice(stock)}\r\n                />\r\n              </li>\r\n              <li>\r\n                <Tag color=\"geekblue\" className=\"calender-stock-price\">\r\n                  ₹{stock.price}\r\n                </Tag>\r\n              </li>\r\n            </ul>\r\n          ))}\r\n        {stockRecord.length === 0 && (\r\n          <li className=\"add-stock-list-item\">\r\n            <Button\r\n              className=\"add-stock-button\"\r\n              onClick={() => toggleModalVisibility(value)}\r\n            >\r\n              <span>\r\n                <Icon type=\"plus\" />\r\n                Add\r\n              </span>\r\n            </Button>\r\n          </li>\r\n        )}\r\n      </ul>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <Card bordered={false} className=\"stocks-container\">\r\n      <Calendar\r\n        dateCellRender={dateCellRender}\r\n        monthCellRender={monthCellRender}\r\n        onPanelChange={setMonthAndYear}\r\n      />\r\n      <Modal\r\n        title=\"Add Stock Price\"\r\n        visible={modalVisible}\r\n        onOk={addStockPrice}\r\n        onCancel={toggleModalVisibility}\r\n        className=\"add-stock-modal\"\r\n      >\r\n        <InputNumber\r\n          formatter={value => `₹ ${value}`}\r\n          size=\"large\"\r\n          defaultValue={0}\r\n          value={0}\r\n          onChange={setNewStocksPrice}\r\n          onPressEnter={() => alert(\"hi\")}\r\n          className=\"stock-price-input\"\r\n        />\r\n      </Modal>\r\n    </Card>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = store => {\r\n  return {\r\n    stocks: store.stockInfo.stocks\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    getStocksData: () => dispatch(getStocksData()),\r\n    setMonthAndYear: (month, year) => dispatch(setMonthAndYear(month, year)),\r\n    addStockPrice: newStockData => dispatch(addStockPrice(newStockData)),\r\n    deleteStockPrice: stockId => dispatch(deleteStockPrice(stockId))\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(StocksCalender);\r\n","import React from \"react\";\r\nimport { Card } from \"antd\";\r\n\r\nimport \"./chart.css\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport * as Highcharts from \"highcharts\";\r\nimport HighchartsReact from \"highcharts-react-official\";\r\n\r\nconst Chart = props => {\r\n  const monthNames = [\r\n    \"Jan\",\r\n    \"Feb\",\r\n    \"Mar\",\r\n    \"Apr\",\r\n    \"May\",\r\n    \"Jun\",\r\n    \"Jul\",\r\n    \"Aug\",\r\n    \"Sep\",\r\n    \"Oct\",\r\n    \"Nov\",\r\n    \"Dec\"\r\n  ];\r\n  const xAxisDates = props.stocks.map(stock => {\r\n    let date = new Date(stock.date);\r\n    let month = date.getMonth();\r\n    let day = date.getDate();\r\n    return `${day}, ${monthNames[month]}`;\r\n  });\r\n  const yAxisPrices = props.stocks.map(stock => {\r\n    return Number(stock.price);\r\n  });\r\n  const options = {\r\n    title: {\r\n      text: \"Price Trend : \" + monthNames[props.month] + \",\" + props.year\r\n    },\r\n    xAxis: {\r\n      categories: xAxisDates\r\n    },\r\n    series: [\r\n      {\r\n        showInLegend: false,\r\n        data: yAxisPrices\r\n      }\r\n    ]\r\n  };\r\n  return (\r\n    <Card bordered={false} className=\"chart-container\">\r\n      <HighchartsReact\r\n        highcharts={Highcharts}\r\n        options={options}\r\n        className=\"chart\"\r\n      />\r\n    </Card>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = store => {\r\n  return {\r\n    month: store.stockInfo.month,\r\n    year: store.stockInfo.year,\r\n    stocks: store.stockInfo.stocks\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {};\r\n};\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Chart);\r\n","import React, { useEffect } from \"react\";\r\nimport { Card } from \"antd\";\r\n\r\nimport \"./profit.css\";\r\nimport { connect } from \"react-redux\";\r\nimport { getMaximumProfit } from \"../../redux/actions/stocksActions\";\r\n\r\nconst Profit = props => {\r\n  useEffect(() => {\r\n    props.getMaximumProfit();\r\n  });\r\n  return (\r\n    <Card bordered={false} className=\"profit-price-container\">\r\n      <p>Maximum Profit: ₹{props.maximumProfit}</p>\r\n    </Card>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = store => {\r\n  return {\r\n    month: store.stockInfo.month,\r\n    year: store.stockInfo.year,\r\n    stocks: store.stockInfo.stocks,\r\n    maximumProfit: store.stockInfo.maximumProfit\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    getMaximumProfit: () => dispatch(getMaximumProfit())\r\n  };\r\n};\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Profit);\r\n","import React from \"react\";\r\nimport { Spin } from \"antd\";\r\n\r\nimport \"./loader.css\";\r\n\r\nconst Loader = props => {\r\n  return <Spin tip=\"Loading...\" className=\"loader-container\"></Spin>;\r\n};\r\n\r\nexport default Loader;\r\n","import React, { useEffect } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { getStocksData } from \"../../redux/actions/stocksActions\";\r\nimport StocksCalender from \"../StocksCalender/StocksCalender\";\r\nimport Chart from \"../Chart/Chart\";\r\nimport Profit from \"../Profit/Profit\";\r\nimport Loader from \"../Loader/Loader\";\r\n\r\nconst Home = props => {\r\n  useEffect(() => {\r\n    props.getStocksData();\r\n  }, []);\r\n  return (\r\n    <div className=\"container-main\">\r\n      {props.stocks.length ? (\r\n        <div>\r\n          <StocksCalender /> <Profit /> <Chart />\r\n        </div>\r\n      ) : (\r\n        <Loader />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = store => {\r\n  return {\r\n    stocks: store.stockInfo.stocks\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    getStocksData: () => dispatch(getStocksData())\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Home);\r\n","const initialState = {\r\n  stocks: [],\r\n  stockRecords: [],\r\n  month: new Date().getMonth(),\r\n  year: new Date().getFullYear(),\r\n  buyDate: \"\",\r\n  sellDate: \"\",\r\n  maximumProfit: 0\r\n};\r\n\r\nconst stocksReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case \"UPDATE_STOCKS_CALENDER\":\r\n      let stockRecords = action.stocksData;\r\n      let stocks = stockRecords.map(stock => {\r\n        return { id: stock.id, ...stock.fields };\r\n      });\r\n      return Object.assign({}, state, {\r\n        stockRecords: stockRecords,\r\n        stocks: stocks\r\n      });\r\n    case \"UPDATE_STOCK_DATA\":\r\n      let newStock = action.stock;\r\n      let updatedStocksList = [\r\n        { id: newStock.id, ...newStock.fields },\r\n        ...state.stocks\r\n      ];\r\n      updatedStocksList.sort((stockA, stockB) => {\r\n        let stockADate = new Date(stockA.date);\r\n        let stockBDate = new Date(stockB.date);\r\n        if (stockADate < stockBDate) return -1;\r\n        if (stockADate > stockBDate) return 1;\r\n        return 0;\r\n      });\r\n      return Object.assign({}, state, {\r\n        stocks: updatedStocksList\r\n      });\r\n    case \"DELETE_STOCK_DATA\":\r\n      let stocksInState = state.stocks;\r\n      let updatedStocks = stocksInState.filter(x => x.id !== action.stockId);\r\n      return Object.assign({}, state, { stocks: updatedStocks });\r\n    case \"SET_MONTH_YEAR\":\r\n      return Object.assign({}, state, {\r\n        month: action.month,\r\n        year: action.year\r\n      });\r\n    case \"GET_MAXIMUM_PROFIT\":\r\n      var buyDate;\r\n      var sellDate;\r\n      var stockList = state.stocks;\r\n      let dailyProfitList = state.stocks.map((stockA, indexA) => {\r\n        let stockDetails = { ...stockA };\r\n        buyDate = stockDetails.date;\r\n        let price = Number(stockA.price) * 10;\r\n\r\n        let priceDiffList = state.stocks.map((stockB, indexB) => {\r\n          let priceDiff = Number(stockB.price) * 10 - price;\r\n          if (indexB <= indexA) {\r\n            return 0;\r\n          }\r\n          return priceDiff >= 0 ? priceDiff : 0;\r\n        });\r\n        let maxDiff = Math.max(...priceDiffList);\r\n        // console.log(priceDiffList);\r\n        let index = [...priceDiffList].indexOf(maxDiff);\r\n        sellDate = stockList[index].date;\r\n        return maxDiff;\r\n      });\r\n      const maximumProfit = Math.max(...dailyProfitList);\r\n      let index = dailyProfitList.indexOf(maximumProfit);\r\n      sellDate = stockList[index].date;\r\n      // console.log(dailyProfitList);\r\n      // console.log(index);\r\n      // console.log(stockList[index]);\r\n      return Object.assign({}, state, {\r\n        maximumProfit: maximumProfit,\r\n        sellDate: sellDate\r\n      });\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default stocksReducer;\r\n","import { combineReducers } from \"redux\";\r\nimport stocksReducer from \"./stocksReducer\";\r\n\r\nexport const rootReducer = combineReducers({\r\n  stockInfo: stocksReducer\r\n});\r\n","import React from \"react\";\nimport { Provider } from \"react-redux\";\nimport Home from \"./components/Home/Home\";\n\nimport configureStore from \"./redux/store\";\nfunction App() {\n  const store = configureStore();\n\n  return (\n    <Provider store={store}>\n      <Home />\n    </Provider>\n  );\n}\n\nexport default App;\n","/*Library Imports*/\r\nimport { createStore, applyMiddleware } from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\n\r\n/*Reducer Import*/\r\nimport { rootReducer } from \"./reducers/reducer\";\r\n\r\nexport default function configureStore() {\r\n  const store = createStore(rootReducer, applyMiddleware(thunk));\r\n  return store;\r\n}\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}